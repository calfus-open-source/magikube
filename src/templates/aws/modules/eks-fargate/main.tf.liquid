data "aws_availability_zones" "available" {}

data "aws_iam_group" "devops" {
  group_name = "${ var.name }-devops"
}

locals {
  azs      = slice(data.aws_availability_zones.available.names, 0, {{ aws_az_count }})
}

resource "aws_kms_key" "eks_kms" {
  description = "${ var.name }-${ var.environment }-eks-key"
}

module "eks" {
  source  = "terraform-aws-modules/eks/aws"
  version = "{{ aws_eks_module_version }}"

  cluster_name       = "${var.name}-${var.environment}-eks"
  cluster_version    = var.cluster_version
  cluster_encryption_config = {
    "resources": [
      "secrets"
    ]
  }

  kms_key_owners = data.aws_iam_group.devops.users[*].arn
  enable_cluster_creator_admin_permissions = true
  dataplane_wait_duration = "0s"

  authentication_mode = "API"
  cluster_endpoint_public_access  = true

  cluster_addons = {
    coredns = {
      most_recent = true
    }
    kube-proxy = {
      most_recent = true
    }
    vpc-cni = {
      most_recent = true
    }
  }

  subnet_ids               = var.vpc_private_subnets
  vpc_id                   = var.vpc_id

  # Fargate Profile(s)
  fargate_profiles = merge(
    {
      for i in range(1) :
        "${var.name}-${var.environment}-${element(split("-", local.azs[i]), 2)}" => {
          name = "${var.name}-${var.environment}-${element(split("-", local.azs[i]), 2)}"
          selectors = [
            { namespace = "${var.name}-${var.environment}-*" },
          ]

          # We want to create a profile per AZ for high availability
          subnet_ids = [element(var.vpc_private_subnets, i)]

          timeouts = {
            create = "20m"
            delete = "20m"
          }
        }
    },
    { 
      for i in range(1) :
        "kube-system-${element(split("-", local.azs[i]), 2)}" => {
          selectors = [
            { namespace = "kube-system" }
          ]
          # We want to create a profile per AZ for high availability
          subnet_ids = [element(var.vpc_private_subnets, i)]
        }
    }
  )

  tags = {
    Name             = "${var.name}-${var.environment}-eks"
    "product"        = var.name
    "environment"    = var.environment
    "role"           = "eks"
    "terraform"      = "true"    
  }
}

resource "aws_eks_access_entry" "devops_group" {
  for_each = { for user in data.aws_iam_group.devops.users : user.arn => user }
  cluster_name      = module.eks.cluster_name
  principal_arn     = each.value.arn
  type              = "STANDARD"
}

resource "aws_eks_access_policy_association" "AmazonEKSClusterAdminPolicy" {
  for_each = { for user in data.aws_iam_group.devops.users : user.arn => user }

  cluster_name  = module.eks.cluster_name
  policy_arn    = "arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy"
  principal_arn = each.value.arn

  access_scope {
    type       = "cluster"
  }
}

resource "aws_eks_access_policy_association" "AmazonEKSAdminPolicy" {
  for_each = { for user in data.aws_iam_group.devops.users : user.arn => user }

  cluster_name  = module.eks.cluster_name
  policy_arn    = "arn:aws:eks::aws:cluster-access-policy/AmazonEKSAdminPolicy"
  principal_arn = each.value.arn

  access_scope {
    type       = "cluster"
  }
}

resource "aws_iam_role" "eks-fargate-role" {
  name = "eks-fargate-profile-${ var.name }-${ var.environment }-role"

  assume_role_policy = jsonencode({
    Statement = [{
      Action = ["sts:AssumeRole", "sts:AssumeRoleWithWebIdentity"]
      Effect = "Allow"
      Principal = {
        Service = "eks-fargate-pods.amazonaws.com"
      }
    }]
    Version = "2012-10-17"
  })
}

resource "aws_iam_role_policy_attachment" "AmazonEKSFargatePodExecutionRolePolicy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy"
  role       = aws_iam_role.eks-fargate-role.name
}

resource "aws_iam_role_policy_attachment" "AmazonEKS_CNI_Policy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
  role       = aws_iam_role.eks-fargate-role.name
}


#store these keys in secrets manager
resource "aws_secretsmanager_secret" "k8s_secret" {
  name = "${ var.name }-${ var.environment }-eks-secrets"
  description = "Kubernetes related authentication details"
  recovery_window_in_days = 0
  tags = {
    "product"        = var.name
    "environment"    = var.environment
    "terraform"      = "true"  
  }
}

resource "aws_secretsmanager_secret_version" "k8s_secret_version" {
  secret_id     = aws_secretsmanager_secret.k8s_secret.id
  secret_string = jsonencode({
    cluster_name = module.eks.cluster_name,
    cluster_endpoint = module.eks.cluster_endpoint,
    cluster_certificate_authority_data = module.eks.cluster_certificate_authority_data
    cluster_oidc_issuer_url = module.eks.cluster_oidc_issuer_url
    oidc_provider = module.eks.oidc_provider
    oidc_provider_arn = module.eks.oidc_provider_arn
  })
}

output "cluster_name" {
  value = module.eks.cluster_name
}

output "cluster_endpoint" {
  value = module.eks.cluster_endpoint
}

output "cluster_certificate_authority_data" {
  value = module.eks.cluster_certificate_authority_data
}

output "cluster_oidc_issuer_url" {
  value = module.eks.cluster_oidc_issuer_url
}

output "oidc_provider" {
  value = module.eks.oidc_provider
}

output "oidc_provider_arn" {
  value = module.eks.oidc_provider_arn
}

output "fargate_profiles" {
  value = module.eks.fargate_profiles
}