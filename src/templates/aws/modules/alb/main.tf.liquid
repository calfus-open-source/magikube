resource "aws_lb" "alb" {
  name               = "${var.name}-${var.environment}-alb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [var.ingress_security_group_id]
  subnets            = var.vpc_public_subnets
  enable_deletion_protection = false
}

output "ingress_alb_dns_name" {
  value = aws_lb.alb.dns_name
}

resource "aws_route53_record" "argocd-cname" {
  zone_id = var.route53_zoneid
  name    = "argocd.${var.domain_name}"
  type    = "CNAME"
  ttl     = 300
  records = [aws_lb.alb.dns_name]
}

resource "aws_route53_record" "app-alias" {
  zone_id = var.route53_zoneid
  name    = "${var.domain_name}"
  type    = "A"

  alias {
    name                   = aws_lb.alb.dns_name
    zone_id                = aws_lb.alb.zone_id
    evaluate_target_health = true
  }
}

output "aws_lb_arn" {
  value = aws_lb.alb.arn
}

# Target group for master nodes with target_type set to "ip"
resource "aws_lb_target_group" "tg_master" {
  name        = "${var.name}-${var.environment}-tg-master"
  port        = 80
  protocol    = "HTTP"
  vpc_id      = var.vpc_id
  target_type = "ip"  # Changed to IP
  health_check {
    path                = "/"
    protocol            = "HTTP"
    matcher             = "200"
    interval            = 30
    timeout             = 5
    healthy_threshold   = 3
    unhealthy_threshold = 3
  }
}

# Target group for worker nodes with target_type set to "ip"
resource "aws_lb_target_group" "tg_worker" {
  name        = "${var.name}-${var.environment}-tg-worker"
  port        = 80
  protocol    = "HTTP"
  vpc_id      = var.vpc_id
  target_type = "ip"  # Changed to IP
  health_check {
    path                = "/"
    protocol            = "HTTP"
    matcher             = "200"
    interval            = 30
    timeout             = 5
    healthy_threshold   = 3
    unhealthy_threshold = 3
  }
}

# Target group attachment for master nodes using IP addresses
resource "aws_lb_target_group_attachment" "master_nodes" {
  count            = length(var.master-node-ips)  # Now based on master_node_ips
  target_group_arn = aws_lb_target_group.tg_master.arn
  target_id        = element(var.master-node-ips, count.index)  # Using IP addresses
  port             = 80
}

# Target group attachment for worker nodes using IP addresses
resource "aws_lb_target_group_attachment" "worker_nodes" {
  count            = length(var.worker-node-ips)  # Now based on worker_node_ips
  target_group_arn = aws_lb_target_group.tg_worker.arn
  target_id        = element(var.worker-node-ips, count.index)  # Using IP addresses
  port             = 80
}

resource "aws_lb_listener" "alb_listener_https" {
  load_balancer_arn = aws_lb.alb.arn
  port              = "443"
  protocol          = "HTTPS"
  ssl_policy        = "ELBSecurityPolicy-TLS-1-2-2017-01"
  certificate_arn   = var.aws_acm_certificate_arn

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.tg_master.arn
  }
}

resource "aws_lb_listener_rule" "forward_to_worker" {
  listener_arn = aws_lb_listener.alb_listener_https.arn
  action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.tg_worker.arn
  }

  condition {
    host_header {
      values = ["${var.domain_name}"]
    }
  }
}

resource "aws_lb_listener" "alb_listener_http" {
  load_balancer_arn = aws_lb.alb.arn
  port              = "80"
  protocol          = "HTTP"

  default_action {
    type = "redirect"

    redirect {
      protocol    = "HTTPS"
      port        = "443"
      status_code = "HTTP_301"
    }
  }
}
