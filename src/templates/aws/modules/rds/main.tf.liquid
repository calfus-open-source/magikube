
data "aws_availability_zones" "available" {}
locals {
  azs      = slice(data.aws_availability_zones.available.names, 0, 3)
  tags = {
    "product"        = var.name
    "environment"    = var.environment
    "role"           = "db"
    "terraform"      = "true"    
  }
}

module "rds" {
  source = "terraform-aws-modules/rds/aws"
  version = "6.4.0"

  identifier           = "${var.name}-${var.environment}"
  engine               = "postgres"
  engine_version       = "16"
  family               = "postgres16" # DB parameter group
  major_engine_version = "16"         # DB option group
  instance_class       = "db.t3.micro"

  allocated_storage     = 20
  max_allocated_storage = 100

  username                                          = "postgres"
  port                                              = 5432
  manage_master_user_password_rotation              = true
  master_user_password_rotate_immediately           = false
  master_user_password_rotation_schedule_expression = "rate(15 days)"
  db_subnet_group_name                              = "${var.name}-${var.environment}-vpc"
  vpc_security_group_ids                            = [var.security_group_id]

  maintenance_window              = "Mon:00:00-Mon:03:00"
  backup_window                   = "03:00-06:00"
  enabled_cloudwatch_logs_exports = ["postgresql", "upgrade"]
  create_cloudwatch_log_group     = true

  backup_retention_period = 1
  skip_final_snapshot     = true
  deletion_protection     = false

  performance_insights_enabled          = false
  performance_insights_retention_period = 7
  create_monitoring_role                = false
  monitoring_interval                   = 0
  monitoring_role_name                  = "${var.name}-${var.environment}-monitoring"
  monitoring_role_use_name_prefix       = false
  monitoring_role_description           = "RDS monitoring role for ${var.name}-${var.environment}-db"

  parameters = [
    {
      name  = "autovacuum"
      value = 1
    },
    {
      name  = "client_encoding"
      value = "utf8"
    }
  ]
  
  tags = local.tags
  db_option_group_tags = {
    "Sensitive" = "low"
    }
  db_parameter_group_tags = {
    "Sensitive" = "low"
    }
}

output "db_host" {
  value = module.rds.db_instance_address
}

output "db_port" {
  value = module.rds.db_instance_port
}
