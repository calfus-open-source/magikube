{% comment "Following can not be replaced with terraform variables and it requires to be defined upfront" %}{% endcomment %}
provider "aws" {
    region     = "{{ aws_region}}"
}

data "aws_route53_zone" "route53_zone" {
  name = var.domain_name
}

terraform {
     backend "s3" {
     }
 }

module "vpc" {
    source = "./modules/vpc"
    name = "${ var.project_name }-${ var.environment }-vpc"
    environment = "${ var.environment }"
    cidr = "${ var.vpc_cidr }"
}

module "eks" {
    source                  = "./modules/eks-nodegroup"
    name                    = "${ var.project_name }"
    environment             = "${ var.environment }"
    vpc_id                  = module.vpc.id
    vpc_private_subnets     = module.vpc.private_subnets
    cluster_version         = "${ var.cluster_version }"
}

{% comment %} module "route53" {
    source = "./modules/route53"
    name = "${ var.project_name }"
    environment = "${ var.environment }"
    domain_name = coalesce(var.domain_name, replace(module.eks.cluster_endpoint, "https://", ""))
} {% endcomment %}


module "acm" {
    source = "./modules/acm"
    name = "${ var.project_name }"
    environment = "${ var.environment }"
    domain_name = var.domain_name
    route53_zoneid = data.aws_route53_zone.route53_zone.zone_id
}

{% if source_code_repository == 'github' %}
module "gitops" {
    source = "./modules/gitops"
    name = "${ var.project_name }"
    environment = "${ var.environment }"
    github_token = "${ var.github_access_token }"
    github_owner = "${ var.github_owner }"
}

module "repository" {
     source = "./modules/code-repository"
     name = "${ var.project_name }"
     appType = "${ var.appType }"
     environment = "${ var.environment }"
     github_token = "${ var.github_access_token }"
     github_owner = "${ var.github_owner }"
}
{% endif %}

{% comment %} {% if source_code_repository == 'codecommit' %}
module "gitops" {
    source = "./modules/gitops"
    name = "${ var.project_name }"
    environment = "${ var.environment }"
}

locals {
   repositories = [
     for repo_name in var.appType : {
       appType = repo_name
       description     = "Repository for ${repo_name}"
     }
   ]
 }
 module "codecommit_repo" {
     source = "./modules/code-repository"
     count = length(local.repositories)
     name = "${ var.project_name }"
     appType = local.repositories[count.index].appType
     environment = "${ var.environment }"
 }
{% endif %} {% endcomment %}

data "aws_eks_cluster_auth" "eks_cluster_auth" {
    name = module.eks.cluster_name
}
  
module "ingress-controller" {
    source                   = "./modules/ingress-controller"
    name                     = "${ var.project_name }"
    environment              = "${ var.environment }"
    region                   = "${ var.region }"
    cluster_endpoint         = module.eks.cluster_endpoint
    cluster_certificate_authority_data = module.eks.cluster_certificate_authority_data
    cluster_name             = module.eks.cluster_name
    vpc_id                   = module.vpc.id
    vpc_private_subnets      = module.vpc.private_subnets
    vpc_public_subnets       = module.vpc.public_subnets
    oidc_provider_arn        = module.eks.oidc_provider_arn
    oidc_provider            = module.eks.oidc_provider
    cluster_token            = data.aws_eks_cluster_auth.eks_cluster_auth.token
    cluster_node_group_name  = module.eks.eks_managed_node_groups
}

module "environment" {
  source                             = "./modules/environment"
  name                               = "${ var.project_name }"
  environment                        = "${ var.environment }"
  region                             = "${ var.region }"
  cluster_endpoint                   = module.eks.cluster_endpoint
  cluster_certificate_authority_data = module.eks.cluster_certificate_authority_data
  cluster_token                      = data.aws_eks_cluster_auth.eks_cluster_auth.token
  domain_name                        = var.domain_name
  route53_zoneid                     = data.aws_route53_zone.route53_zone.zone_id
  gitops_repo_url_ssh                = module.gitops.gitops_ssh_clone_url
  gitops_user_private_key            = module.gitops.gitops_ssh_private_key 
  argocd_namespace                   = module.argo.argocd_namespace
}

module "argo" {
    source = "./modules/argocd"
    name                               = "${ var.project_name }"
    environment                        = "${ var.environment }"
    region                             = "${ var.region }"
    cluster_endpoint                   = module.eks.cluster_endpoint
    cluster_certificate_authority_data = module.eks.cluster_certificate_authority_data
    cluster_name                       = module.eks.cluster_name
    oidc_provider_arn                  = module.eks.oidc_provider_arn
    oidc_provider                      = module.eks.oidc_provider
    cluster_token                      = data.aws_eks_cluster_auth.eks_cluster_auth.token
    route53_zoneid                     = data.aws_route53_zone.route53_zone
    domain_name                        = "${ var.domain_name }"
    ssl_cert_arn                       = module.acm.ssl_cert_arn
    vpc_public_subnets                 = module.vpc.public_subnets
    gitops_repo_url_ssh                = module.gitops.gitops_ssh_clone_url
    gitops_user_private_key            = module.gitops.gitops_ssh_private_key 
}
