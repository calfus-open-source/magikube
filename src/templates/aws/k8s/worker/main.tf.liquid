
data "aws_ami" "worker_host_ami" { 
    most_recent = true
    owners = ["{{ worker_host_ami_owner }}"] # Canonical
    
    filter {
        name   = "name"
        values = ["{{ worker_host_ami_name }}"]
    }
  
    filter {
        name   = "virtualization-type"
        values = ["{{ worker_host_ami_virtualization_type }}"]
    }
  }
  
  resource "aws_launch_template" "worker-host-launch-template" {
    name_prefix                 = "{{ project_name }}-{{ environment }}-worker"
    description                 = "worker-host-launch-template"
    disable_api_termination     = "false"
    image_id                    = data.aws_ami.worker_host_ami.id  
    instance_type               = "{{ worker_instance_type }}"
    key_name                    = "${var.ssh_key_name}"
    # vpc_security_group_ids      = [var.default_security_group_id]
  }
  
  resource "aws_instance" "worker-host" {
    count = {{ worker_instance_count}}
    launch_template {
      id = aws_launch_template.worker-host-launch-template.id
      version = "$Latest"    
    }
  
    subnet_id = var.vpc_private_subnets[0].id
    vpc_security_group_ids = [var.default_security_group_id]
    
    tags = {
      Name = "{{ project_name }}-{{ environment }}-worker" 
      Group = "worker"
    }
  
    ebs_block_device {
      device_name = "/dev/sdb"
      volume_type = "{{ ebs_volume_type }}"
      volume_size = {{ ebs_volume_size }}
      tags = {
        Name        = "data"
      }
    }
    
    ebs_block_device {
      device_name = "/dev/sdf"
      volume_type = "{{ ebs_volume_type }}"
      volume_size = {{ ebs_volume_size }}
      tags = {
        Name        = "logs"
      }
    }
  }
  
  output "k8s-worker-ids" {
    value = aws_instance.worker-host.*.id
  }
  
  output "k8s-worker-ips" {
    value = [for host in aws_instance.worker-host:
      host.private_ip 
    ]
  }
