{% comment "Following can not be replaced with terraform variables and it requires to be defined upfront" %}{% endcomment %}
provider "aws" {
  region     = "{{ aws_region }}"
}

terraform {
  backend "s3" {
  }
}

module "vpc" {
  source = "./modules/vpc"
  name = "${ var.project_name }-${ var.environment }-vpc"
  environment = "${ var.environment }"
  cidr = "${ var.vpc_cidr }"
}

module "ssh-key" {
  source          = "./modules/ssh-key"
  ssh_key_name    = "${ var.project_name }-${ var.environment }-key"
  env_files_bucket_name = "${ var.project_name }-${ var.environment }-bucket"
}

module "bastion" {
  source                     = "./modules/bastion"
  ssh_key_name               = module.ssh-key.ssh_key_name
  default_security_group_id  = module.vpc.default_security_group_id
  vpc_private_subnets        = module.vpc.private_subnets[0]
  vpc_public_subnets         = module.vpc.public_subnets[0]
  name                       = "${ var.project_name }-${ var.environment }-bastion"
  project_id                 = var.project_id
  environment                = var.environment
  project_name               = var.project_name
}

module "master" {
  source                     = "./modules/master"
  ssh_key_name               = module.ssh-key.ssh_key_name
  default_security_group_id  = module.vpc.default_security_group_id
  vpc_private_subnets        = module.vpc.private_subnets[0]
  name                       = "${ var.project_name }-${ var.environment }-master"
  project_id                 = var.project_id
  environment                = var.environment
  project_name               = var.project_name
}

module "worker" {
  source                     = "./modules/worker"
  ssh_key_name               = module.ssh-key.ssh_key_name
  default_security_group_id  = module.vpc.default_security_group_id
  vpc_private_subnets        = module.vpc.private_subnets[0]
  name                       = "${ var.project_name }-${ var.environment }-worker"
  project_id                 = var.project_id
  environment                = var.environment
  project_name               = var.project_name
}

{% comment %} 
module "route53" {
    source = "./modules/route53"
    name = "${ var.project_name }"
    environment = "${ var.environment }"
    domain_name = coalesce(var.domain_name, replace(module.eks.cluster_endpoint, "https://", ""))
} {% endcomment %}
{% comment %} 
{% if domain %}
  module "acm" {
      source = "./modules/acm"
      name = "${ var.project_name }"
      environment = "${ var.environment }"
      domain_name = coalesce(var.domain_name, module.eks.cluster_endpoint)
      route53_zoneid = module.route53.zone_id
  } 
{% endif %} {% endcomment %}

locals {
  rendered_template = templatefile("./ssh-config.tftpl", {
    project_name = "${ var.project_name }"
    environment  = "${ var.environment }"
    bastion_ips   = module.bastion.k8s-bastion-ips
    master_ips    = module.master.k8s-master-ips
    worker_ips   = module.worker.k8s-worker-ips
  })
}

resource "null_resource" "ssh_config" {
  provisioner "local-exec" {
    command = "echo '${local.rendered_template}' >> ~/.ssh/config"
  }
}

output "master_ip" {
  value = module.master.k8s-master-ips[0]
}
  
output "vpc_id" {
  value = module.vpc.id
}

output "vpc_public_subnets" {
  value = module.vpc.public_subnets
}

output "vpc_private_subnets" {
  value = module.vpc.private_subnets
}

{% if source_code_repository == 'github' %}
module "gitops" {
      source = "./modules/gitops"
      name = "${ var.project_name }"
      environment = "${ var.environment }"
      github_token = "${ var.github_access_token }"
      github_owner = "${ github_owner }"
}

module "github_repo" {
     source = "./modules/code-repository"
     name = "${ var.project_name }"
     appType = "${ var.appType }"
     environment = "${ var.environment }"
     github_token = "${ var.github_access_token }"
     github_owner = "${ var.github_owner }"
 }
{% endif %}

{% if source_code_repository == 'codecommit' %}
module "gitops" {
    source = "./modules/gitops"
    name = "${ var.project_name }"
    environment = "${ var.environment }"
}

locals {
   repositories = [
     for repo_name in var.appType : {
       appType = repo_name
       description     = "Repository for ${repo_name}"
     }
   ]
 }
 module "codecommit_repo" {
     source = "./modules/code-repository"
     count = length(local.repositories)
     name = "${ var.project_name }"
     appType = local.repositories[count.index].appType
     environment = "${ var.environment }"
 }
{% endif %}